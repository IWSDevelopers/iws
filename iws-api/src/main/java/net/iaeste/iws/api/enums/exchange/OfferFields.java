/*
 * =============================================================================
 * Copyright 1998-2016, IAESTE Internet Development Team. All rights reserved.
 * ----------------------------------------------------------------------------
 * Project: IntraWeb Services (iws-api) - net.iaeste.iws.api.enums.exchange.OfferFields
 * -----------------------------------------------------------------------------
 * This software is provided by the members of the IAESTE Internet Development
 * Team (IDT) to IAESTE A.s.b.l. It is for internal use only and may not be
 * redistributed. IAESTE A.s.b.l. is not permitted to sell this software.
 *
 * This software is provided "as is"; the IDT or individuals within the IDT
 * cannot be held legally responsible for any problems the software may cause.
 * =============================================================================
 */
package net.iaeste.iws.api.enums.exchange;

import net.iaeste.iws.api.enums.Currency;
import net.iaeste.iws.api.enums.Language;
import net.iaeste.iws.api.util.Date;
import net.iaeste.iws.api.util.DatePeriod;

import javax.xml.bind.annotation.XmlType;
import java.math.BigDecimal;
import java.util.EnumSet;
import java.util.Set;

/**
 * <p>This enumerated type holds the different fields present in the CSV files,
 * which is either generated by the IWS or can be uploaded to the IWS. There is
 * a couple of fields which are not present in both files.</p>
 *
 * <p>The published CSV guideline, will contain description of all fields.</p>
 *
 * @author  Kim Jensen / last $Author:$
 * @version $Revision:$ / $Date:$
 * @since   IWS 1.1
 */
@XmlType(name = "offerFields")
public enum OfferFields {

    REF_NO("Ref.No", "setRefNo", EnumSet.allOf(Type.class), String.class),
    OFFER_TYPE("OfferType", "setOfferType", EnumSet.of(Type.DOMESTIC, Type.UPLOAD), OfferType.class),
    EXCHANGE_TYPE("ExchangeType", "setExchangeType", EnumSet.of(Type.DOMESTIC), ExchangeType.class), // Not supported to set this via CSV
    DEADLINE("Deadline", "setNominationDeadline", EnumSet.allOf(Type.class), Date.class),
    COMMENT("Comment", "setPrivateComment", EnumSet.allOf(Type.class), String.class),
    EMPLOYER("Employer", "setName", EnumSet.allOf(Type.class), String.class),
    DEPARTMENT("Department", "setDepartment", EnumSet.allOf(Type.class), String.class),
    STREET1("Street1", "setStreet1", EnumSet.allOf(Type.class), String.class),
    STREET2("Street2", "setStreet2", EnumSet.allOf(Type.class), String.class),
    POSTBOX("PostBox", "setPobox", EnumSet.allOf(Type.class), String.class),
    POSTAL_CODE("PostalCode", "setPostalCode", EnumSet.allOf(Type.class), String.class),
    CITY("City", "setCity", EnumSet.allOf(Type.class), String.class),
    STATE("State", "setState", EnumSet.allOf(Type.class), String.class),
    COUNTRY("Country", null, EnumSet.allOf(Type.class), String.class),
    WEBSITE("Website", "setWebsite", EnumSet.allOf(Type.class), String.class),
    WORKPLACE("Workplace", "setWorkingPlace", EnumSet.allOf(Type.class), String.class),
    BUSINESS("Business", "setBusiness", EnumSet.allOf(Type.class), String.class),
    RESPONSIBLE("Responsible", null, EnumSet.allOf(Type.class), String.class),
    AIRPORT("Airport", "setNearestAirport", EnumSet.allOf(Type.class), String.class),
    TRANSPORT("Transport", "setNearestPublicTransport", EnumSet.allOf(Type.class), String.class),
    EMPLOYEES("Employees", "setEmployeesCount", EnumSet.allOf(Type.class), String.class),
    HOURS_WEEKLY("HoursWeekly", "setWeeklyHours", EnumSet.allOf(Type.class), Float.class),
    HOURS_DAILY("HoursDaily", "setDailyHours", EnumSet.allOf(Type.class), Float.class),
    CANTEEN("Canteen", "setCanteen", EnumSet.allOf(Type.class), Boolean.class),
    FACULTY("Faculty", "setFieldOfStudies", EnumSet.allOf(Type.class), Set.class),
    SPECIALIZATION("Specialization", "setSpecializations", EnumSet.allOf(Type.class), Set.class),
    TRAINING_REQUIRED("TrainingRequired", "setPreviousTrainingRequired", EnumSet.allOf(Type.class), Boolean.class),
    OTHER_REQUIREMENTS("OtherRequirements", "setOtherRequirements", EnumSet.allOf(Type.class), String.class),
    WORK_KIND("Workkind", "setWorkDescription", EnumSet.allOf(Type.class), String.class), // Mapped to Work Description
    WEEKS_MIN("WeeksMin", "setMinimumWeeks", EnumSet.allOf(Type.class), Integer.class),
    WEEKS_MAX("WeeksMax", "setMaximumWeeks", EnumSet.allOf(Type.class), Integer.class),
    FROM("From", "setPeriod1", EnumSet.allOf(Type.class), DatePeriod.class),
    TO("To", "setPeriod1", EnumSet.allOf(Type.class), DatePeriod.class),
    // Used internally for the 3 sub-values
    STUDY_COMPLETED("StudyCompleted", "setStudyLevels", EnumSet.allOf(Type.class), Set.class),
    STUDY_COMPLETED_BEGINNING("StudyCompleted_Beginning", "setStudyLevels", EnumSet.allOf(Type.class), Set.class),
    STUDY_COMPLETED_MIDDLE("StudyCompleted_Middle", "setStudyLevels", EnumSet.allOf(Type.class), Set.class),
    STUDY_COMPLETED_END("StudyCompleted_End", "setStudyLevels", EnumSet.allOf(Type.class), Set.class),
    // Used internally for the 4 sub-values
    WORK_TYPE("WorkType", "setTypeOfWork", EnumSet.allOf(Type.class), TypeOfWork.class),
    WORK_TYPE_P("WorkType_P", "setTypeOfWork", EnumSet.allOf(Type.class), TypeOfWork.class),
    WORK_TYPE_R("WorkType_R", "setTypeOfWork", EnumSet.allOf(Type.class), TypeOfWork.class),
    WORK_TYPE_W("WorkType_W", "setTypeOfWork", EnumSet.allOf(Type.class), TypeOfWork.class),
    WORK_TYPE_N("WorkType_N", "setTypeOfWork", EnumSet.allOf(Type.class), TypeOfWork.class),
    LANGUAGE_1("Language1", "setLanguage1", EnumSet.allOf(Type.class), Language.class),
    LANGUAGE_1_LEVEL("Language1Level", "setLanguage1Level", EnumSet.allOf(Type.class), LanguageLevel.class),
    LANGUAGE_1_OR("Language1Or", "setLanguage1Operator", EnumSet.allOf(Type.class), LanguageOperator.class),
    LANGUAGE_2("Language2", "setLanguage2", EnumSet.allOf(Type.class), Language.class),
    LANGUAGE_2_LEVEL("Language2Level", "setLanguage2Level", EnumSet.allOf(Type.class), LanguageLevel.class),
    LANGUAGE_2_OR("Language2Or", "setLanguage2Operator", EnumSet.allOf(Type.class), LanguageOperator.class),
    LANGUAGE_3("Language3", "setLanguage3", EnumSet.allOf(Type.class), Language.class),
    LANGUAGE_3_LEVEL("Language3Level", "setLanguage3Level", EnumSet.allOf(Type.class), LanguageLevel.class),
    CURRENCY("Currency", "setCurrency", EnumSet.allOf(Type.class), Currency.class),
    PAYMENT("Payment", "setPayment", EnumSet.allOf(Type.class), BigDecimal.class),
    PAYMENT_FREQUENCY("PaymentFrequency", "setPaymentFrequency", EnumSet.allOf(Type.class), PaymentFrequency.class),
    DEDUCTION("Deduction", "setDeduction", EnumSet.allOf(Type.class), String.class),
    LODGING("Lodging", "setLodgingBy", EnumSet.allOf(Type.class), String.class),
    LODGING_COST("LodgingCost", "setLodgingCost", EnumSet.allOf(Type.class), BigDecimal.class),
    LODGING_COST_FREQUENCY("LodgingCostFrequency", "setLodgingCostFrequency", EnumSet.allOf(Type.class), PaymentFrequency.class),
    LIVING_COST("LivingCost", "setLivingCost", EnumSet.allOf(Type.class), BigDecimal.class),
    LIVING_COST_FREQUENCY("LivingCostFrequency", "setLivingCostFrequency", EnumSet.allOf(Type.class), PaymentFrequency.class),
    NO_HARD_COPIES("NoHardCopies", "setNumberOfHardCopies", EnumSet.allOf(Type.class), Integer.class),
    STATUS("Status", null, EnumSet.of(Type.DOMESTIC, Type.FOREIGN)), // Not supported to set this via CSV
    PERIOD_2_FROM("Period2_From", "setPeriod2", EnumSet.allOf(Type.class), DatePeriod.class),
    PERIOD_2_TO("Period2_To", "setPeriod2", EnumSet.allOf(Type.class), DatePeriod.class),
    HOLIDAYS_FROM("Holidays_From", "setUnavailable", EnumSet.allOf(Type.class), DatePeriod.class),
    HOLIDAYS_TO("Holidays_To", "setUnavailable", EnumSet.allOf(Type.class), DatePeriod.class),
    ADDITIONAL_INFO("Additional_Info", "setAdditionalInformation", EnumSet.allOf(Type.class), String.class),
    SHARED("Shared", null, EnumSet.of(Type.DOMESTIC, Type.FOREIGN)), // Not supported to set this via CSV
    LAST_MODIFIED("Last modified", null, EnumSet.of(Type.FOREIGN, Type.DOMESTIC)), // Not supported to set this via CSV
    NS_FIRST_NAME("NS First Name", null, EnumSet.of(Type.FOREIGN, Type.DOMESTIC)), // Not supported to set this via CSV
    NS_LAST_NAME("NS Last Name", null, EnumSet.of(Type.FOREIGN, Type.DOMESTIC)); // Not supported to set this via CSV

    // =========================================================================
    // Private Constructor & functionality
    // =========================================================================

    /** For handling of the CSV rows, we need to know what we expect to have. */
    public enum Type {
        DOMESTIC, FOREIGN, UPLOAD
    }

    private final String field;
    private final String method;
    private final Set<Type> usage;
    private final Class<?>[] classes;

    OfferFields(final String field, final String method, final Set<Type> usage, final Class<?>... classes) {
        this.field = field;
        this.method = method;
        this.usage = usage;
        this.classes = classes;
    }

    public String getField() {
        return field;
    }

    public boolean useField(final Type type) {
        return usage.contains(type);
    }

    public String getMethod() {
        return method;
    }

    public Class<?>[] getArgumentClasses() {
        Class<?>[] result = null;

        if (classes != null) {
            result = new Class[1];
            result[0] = classes[0];
        }

        return result;
    }
}
