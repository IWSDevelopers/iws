-- =============================================================================
-- This script contain the basic tables for the IWS
-- -----------------------------------------------------------------------------
-- Country Model:
--     - countries
-- Permission Model:
--     - Permissions
--     - GroupTypes
--     - Roles
--     - Permission 2 GroupTypes
-- Access Model:
--     - Users
--     - Groups
--     - User 2 GroupTypes
-- =============================================================================

-- =============================================================================
-- Countries
-- -----------------------------------------------------------------------------
-- =============================================================================
create sequence country_sequence start with 1 increment by 1;
create table countries (
    id                  integer generated by default as sequence country_sequence primary key,
    country_name        varchar(100) unique not null,
--     CountryID          VARCHAR(2)   NOT NULL PRIMARY KEY,
--     CountryName        VARCHAR(100) NOT NULL,
--     CountryNameFull    VARCHAR(100) DEFAULT '',
--     CountryNameNative  VARCHAR(100) DEFAULT '',
--     Nationality        VARCHAR(100) NOT NULL,
--     Citizens           VARCHAR(100) DEFAULT '',
--     PhoneCode          VARCHAR(5)   DEFAULT '',
--     Currency           VARCHAR(3)   DEFAULT '',
--     Languages          VARCHAR(100) DEFAULT '',
--     Membership         INTEGER      DEFAULT 5,
--     MembershipYear     INTEGER      DEFAULT -1,
    modified           timestamp default now() not null,
    created            timestamp default now() not null
);
-- /*****************************************************************************\
-- * TABLE :: Countries                                                          *
-- * -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- *
-- * Fields in this table:                                                       *
-- *   CountryID          :: The system ID (2 letter ISO code)                   *
-- *   CountryName        :: The name of the country                             *
-- *   CountryFull        :: The full name of the country (longer version)       *
-- *   CountryNative      :: Native name of the country (i.e. Danmark)           *
-- *   Nationality        :: The nationality of the citizens (i.e. Danish)       *
-- *   Citizens           :: The nationality of the citizens (i.e. Danes)        *
-- *   PhoneCode          :: The phone code (i.e. +45)                           *
-- *   Currency           :: The 3 letter currency (EUR, USD, GBP, etc.)         *
-- *   Languages          :: Comma-separated list of official languages          *
-- *   Membership         :: Membership status (see below)                       *
-- *   MembershipYear     :: Year of membership                                  *
-- * --------------------------------------------------------------------------- *
-- * General description of this table:                                          *
-- *   This table contain the official list of countries from the UN. The list   *
-- *   also contain information about other things, e.g. the type of membership  *
-- *   for IAESTE:                                                               *
-- *     1 Full Member                                                           *
-- *     2 Associative Member                                                    *
-- *     3 Cooperating Institution(s)                                            *
-- *     4 Former Member                                                         *
-- *     5 Listed Country (countries where trainees have come from)              *
-- *     6 Unlisted Countries (countries which have had no contact with IAESTE)  *
-- *     7 Regions (parts of a country with an independent countryid)            *
-- *                                                                             *
-- * Note: Data for this table is stored in "countries.sql"                      *
-- \*****************************************************************************/
-- CREATE TABLE Countries (
--     CountryID          VARCHAR(2)   NOT NULL PRIMARY KEY,
--     CountryName        VARCHAR(100) NOT NULL,
--     CountryNameFull    VARCHAR(100) DEFAULT '',
--     CountryNameNative  VARCHAR(100) DEFAULT '',
--     Nationality        VARCHAR(100) NOT NULL,
--     Citizens           VARCHAR(100) DEFAULT '',
--     PhoneCode          VARCHAR(5)   DEFAULT '',
--     Currency           VARCHAR(3)   DEFAULT '',
--     Languages          VARCHAR(100) DEFAULT '',
--     Membership         INTEGER      DEFAULT 5,
--     MembershipYear     INTEGER      DEFAULT -1,
--     Modified           TIMESTAMP,
--     Created            TIMESTAMP
-- );
-- INSERT INTO Countries (CountryID,CountryName,Nationality,Modified,Created) VALUES ('$$','','','2003-10-01','2003-10-01');

-- =============================================================================
-- Permissions or IWS Functionality
-- -----------------------------------------------------------------------------
-- All functionality in the IWS is mapped to the permission table. And users
-- must have access to a Permission, to be allowed to perform the associated
-- action.
--   Some Permissions are restricted, meaning that they serve a special purpose,
-- and cannot be granted to customized roles.
-- =============================================================================
create table permissions (
    id               integer not null,
    permission       varchar(50) not null,
    restricted       decimal(1) default 1 not null,
    description      varchar(2048),

    primary key (id),
    unique (permission)
);

-- =============================================================================
-- GroupTypes, see net.iaeste.iws.api.enums.GroupType
-- -----------------------------------------------------------------------------
-- GroupTypes or MetaGroups, contains the common information for certain types
-- of Groups, the Common information is the allowed Permissions or
-- functionionality. All Groups in the IW has to be assigned an overall type.
--   Please note, that certain GroupType, are designed so any given user may
-- only be member of 1 (one), others are open, so users can be part of many.
-- The restricted groups are: Administration, Members, National and Sar - In
-- fact, a user can only be member of either 1 National or 1 SAR.
-- =============================================================================
create table grouptypes (
    id                 integer not null,
    grouptype          varchar(50) not null,
    description        varchar(2048),

    primary key (id),
    unique (grouptype)
);

-- =============================================================================
-- Groups
-- -----------------------------------------------------------------------------
-- Needs a parent group, and a status, so only groups that are currently active
-- can be used
-- The status is also important, for member groups, since users can only be part
-- of 1 member group, it means that if this group is disabled - they cannot log in
-- Groups must have mailinglist settings:
--   o Public mailinglist [yes | no]
--   o Private mailinglist [yes | no]
--   o mailinglist name
-- =============================================================================
create sequence group_sequence start with 1 increment by 1;
create table groups (
    id               integer generated by default as sequence group_sequence,
    grouptype_id     integer not null,
    groupname        varchar(50),

    primary key (id),
    foreign key (grouptype_id) references grouptypes (id)
);

-- /*****************************************************************************\
-- * TABLE :: Groups                                                             *
-- * -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- *
-- * Fields in this table:                                                       *
-- *   GroupID            :: The system ID                                       *
-- *   GroupName          :: The name of the group (unique)                      *
-- *   GroupTitle         :: The title of the group (long name)                  *
-- *   GroupTypeID        :: The group type (access rights)                      *
-- *   CountryID          :: For National, SAR and Local, this must be defined   *
-- *   GroupDescription   :: The group description (purpose)                     *
-- *   MailinglistName    :: The name of the mailinglist, automatically generatd *
-- *   MailinglistLimit   :: The e-mail size limit on the mailinglist            *
-- *   MailinglistType    :: Mailinglist open (.org) private (.net) or none      *
-- *   DiscSize           :: The amount of Bytes the group has available (1GB)   *
-- *   DiscUsed           :: The amount of Bytes the group is using              *
-- *   ParentID           :: The GroupID of the Parent                           *
-- * --------------------------------------------------------------------------- *
-- * General description of this table:                                          *
-- * Groups is used to control groups of members and granting these certain      *
-- * rights to the system, sharing between group members, access to specific     *
-- * parts of the system, etc.                                                   *
-- * For usability reasons, the "Members group (7) is referred to as Global      *
-- \*****************************************************************************/
-- CREATE SEQUENCE GroupSeq Start 10;
-- CREATE TABLE Groups (
--     GroupID            INTEGER DEFAULT NextVal ('GroupSeq'::text) NOT NULL PRIMARY KEY,
--     GroupName          VARCHAR(50),
--     FullName           VARCHAR(100) DEFAULT '',
--     GroupTitle         VARCHAR(100) DEFAULT '',
--     GroupTypeID        INTEGER NOT NULL REFERENCES GroupTypes (GroupTypeID) ON DELETE RESTRICT ON UPDATE CASCADE,
--     CountryID          VARCHAR(2)   DEFAULT '$$' REFERENCES Countries (CountryID) ON DELETE RESTRICT ON UPDATE CASCADE,
--     RealCountryID      VARCHAR(2)   DEFAULT '$$' REFERENCES Countries (CountryID) ON DELETE RESTRICT ON UPDATE CASCADE,
--     GroupDescription   VARCHAR(250) DEFAULT '',
--     MailinglistName    VARCHAR(75)  DEFAULT '',
--     MailinglistLimit   INTEGER      DEFAULT 4000000,
--     MailinglistType    VARCHAR(10)  DEFAULT 'private',
--     DiscSize           INTEGER      DEFAULT 1073741824,
--     DiscUsed           INTEGER      DEFAULT 0,
--     ParentID           INTEGER      DEFAULT 0,
--     Status             VARCHAR(10)  DEFAULT 'Active',
--     ParentStatus       VARCHAR(10)  DEFAULT 'Active',
--     Modified           TIMESTAMP,
--     Created            TIMESTAMP
-- );
-- INSERT INTO Groups (GroupID,GroupName,GroupTypeID,MailinglistName,ParentID,Modified,Created) VALUES (-1,'Private',0,'',0,'2003-10-01','2003-10-01');
-- INSERT INTO Groups (GroupID,GroupName,GroupTypeID,MailinglistName,ParentID,Modified,Created) VALUES (0,'Admin',0,'admin@iaeste.net',0,'2003-10-01','2003-10-01');
-- INSERT INTO Groups (GroupID,GroupName,GroupTypeID,MailinglistName,ParentID,Modified,Created) VALUES (1,'GS',2,'gs@iaeste.net',0,'2003-10-01','2003-10-01');
-- INSERT INTO Groups (GroupID,GroupName,GroupTypeID,MailinglistName,ParentID,Modified,Created) VALUES (2,'AC',2,'ac@iaeste.net',1,'2003-10-01','2003-10-01');
-- INSERT INTO Groups (GroupID,GroupName,GroupTypeID,MailinglistName,ParentID,Modified,Created) VALUES (3,'SID',2,'sid@iaeste.net',1,'2003-10-01','2003-10-01');
-- INSERT INTO Groups (GroupID,GroupName,GroupTypeID,MailinglistName,ParentID,Modified,Created) VALUES (4,'IDT',2,'idt@iaeste.net',1,'2003-10-01','2003-10-01');
-- INSERT INTO Groups (GroupID,GroupName,GroupTypeID,MailinglistName,ParentID,Modified,Created) VALUES (5,'Alumni',2,'alumni@iaeste.net',1,'2003-10-01','2003-10-01');
-- INSERT INTO Groups (GroupID,GroupName,GroupTypeID,MailinglistName,ParentID,Modified,Created) VALUES (6,'Jump',2,'jump@iaeste.net',1,'2003-10-01','2003-10-01');
-- INSERT INTO Groups (GroupID,GroupName,GroupTypeID,MailinglistName,ParentID,MailinglistType,Modified,Created) VALUES (7,'Ombudsman',2,'ombudsman@iaeste.org',1,'public','2003-10-01','2003-10-01');
-- INSERT INTO Groups (GroupID,GroupName,GroupTypeID,MailinglistName,ParentID,Modified,Created) VALUES (8,'Global',1,'global@iaeste.net',1,'2003-10-01','2003-10-01');

-- =============================================================================
-- Roles
-- -----------------------------------------------------------------------------
-- A User is asscociated to a Group with a Role, the Role serves as a "hat" for
-- the User in the context of the Group. The role is only needed to hold the
-- collection of permissions, that a User may perform on the data belonging to
-- the Group.
--   By default, 5 roles exists, these roles cannot be altered in any way, and
-- they are there to act as default roles, that will contain the most commonly
-- needed purposes. It is possible to also create customized roles, that will be
-- directed at a specific Group. A customized role can only contain a subset of
-- the Permissions that exists, some permissions are restricted, since they only
-- serve very specific Administrative needs.
--   Note, that the Role itself (the name) is not unique, since it is allowed
-- for Groups to create new Roles, and two Groups should be allowed to have the
-- same name for their Role.
--   Note, custom roles are linked to a specific Country, and will be available
-- for all subgroups in a Country. It is not permitted to create Custom Roles
-- for
-- =============================================================================
create sequence role_sequence start with 10 increment by 1;
create table roles (
    id               integer generated by default as sequence role_sequence,
    role             varchar(50),
    country_id       integer references countries (id),
    description      varchar(2048),
    created          timestamp default now() not null,
    modified         timestamp default now() not null,

    primary key (id)
);

-- =============================================================================
-- Permission to GroupType Associations
-- -----------------------------------------------------------------------------
-- This table contains the actual mapping of basic Permissions to the individual
-- GroupTypes.
-- The different GroupTypes are there, since they have different purposes or
-- functions. The most fundamental part of the Permission model, is that a
-- permission must be granted to a Group, before a member of that group can
-- perform it. However, to avoid having to map the permissions to each Group,
-- they are instead mapped to the GroupType, which acts as a Template for the
-- Group.
-- =============================================================================
create table permission_to_grouptype (
    permission_id    integer references permissions (id),
    grouptype_id     integer references grouptypes (id),

    primary key (permission_id, grouptype_id)
);

-- =============================================================================
-- Permission to Role Associations
-- -----------------------------------------------------------------------------
-- The GroupTypes define the all the Permissions that users may invoke, on the
-- data belonging to a specific Group. However, to better control which
-- functionality a user belonging to a Group may invoke, the Role is used to
-- give a different set of Permissions. To determine if a User may invoke a
-- certain Permission on the Group data, the joined part of the two Permission
-- sets is compared, and only if a Permission is granted for both Group & Role,
-- is the User allowed to perform the action.
--   Custom Roles can pick from all available non-restricted Permissions, and be
-- reused throughout the Groups belonging to the same Country.
-- =============================================================================
create sequence permission_to_role_sequence start with 10 increment by 1;
create table permission_to_role (
    id                integer generated by default as sequence permission_to_role_sequence primary key,
    permission_id     integer references permissions (id),
    role_id           integer references roles (id)
);
alter table permission_to_role add constraint permission_to_role_constraint unique (permission_id, role_id);

-- =============================================================================
--
-- -----------------------------------------------------------------------------
-- =============================================================================
create sequence address_sequence start with 1 increment by 1;
create table addresses (
    id                 integer generated by default as sequence address_sequence primary key,
    street1            varchar(100) default '',
    street2            varchar(100) default '',
    zip                varchar(100) default '',
    city               varchar(100) default '',
    region             varchar(100) default '',
    country_id         integer      not null references countries (id) on delete restrict,
    modified           timestamp    default now(),
    created            timestamp    default now()
);

-- =============================================================================
--
-- -----------------------------------------------------------------------------
-- =============================================================================
create sequence user_sequence start with 1 increment by 1;
create table users (
    id               integer generated by default as sequence user_sequence,
    username         varchar(50) not null,
    password         varchar(128),
    status           decimal(1) default 1 not null,
    created          timestamp default now() not null,
    modified         timestamp default now() not null,

    primary key (id),
    unique (username)
);
create index user_id on users (id);

-- =============================================================================
-- User Sessions
-- -----------------------------------------------------------------------------
-- All actions against the IWS, must be made with an active Session. The Session
-- is closely linked to a person, and only a single active session can exists at
-- the time.
--   The SessionKey is generated with a cryptographical checksum, that contains
-- both some unique entropy, and some user information. The created timestamp is
-- set when the user is logging in, and the modified is set everytime the user
-- makes a request.
-- =============================================================================
create sequence session_sequence start with 1 increment by 1;
create table sessions (
    id               integer generated by default as sequence session_sequence,
    session_key      varchar(128),
    user_id          integer references users (id),
    active           decimal(1) default 1 not null,
    created          timestamp default now() not null,
    modified         timestamp default now() not null,

    primary key (id)
);
create index session_id on sessions (id);

-- =============================================================================
-- User to Group Associations
-- -----------------------------------------------------------------------------
-- Although this is just a "relation" table - certain additional information is
-- crammed into it, since a users association with a group also include
-- information about how the user may access data, and how the system should
-- deal with information sent to the mailinglists of the Group.
--   Further, a user can remain on the list, but with the status  "Suspended",
-- meaning that the user cannot access anything, but the status can be restored
-- together with all other settings, if so desired.
-- =============================================================================
create sequence user_to_group_sequence start with 1 increment by 1;
create table user_to_group (
    id               integer generated by default as sequence user_to_group_sequence primary key,
    user_id          integer not null references users (id),
    group_id         integer not null references groups (id),
    role_id          integer not null references roles (id),
    custom_title     varchar(50),
    on_public_list   decimal(1) default 0 not null,
    on_private_list  decimal(1) default 1 not null,
    status           decimal(1) default 1 not null,
    created          timestamp default now() not null,
    modified         timestamp default now() not null
);
alter table user_to_group add constraint user_to_group_constraint unique (user_id, group_id);

-- =============================================================================
-- Monitoring History
-- -----------------------------------------------------------------------------
-- Monitoring of changes is stored in this table. The changes include the user,
-- the name of the table + the Id of the table and the actual changes (fields),
-- that have been changed. Please note, that not all fields may be present here,
-- if at all - this is depending on the setup of the monitoring for the Entity
-- and the Group.
--   The Group is in the table, so changes can be deleted if the Group is being
-- deleted. Or if the Group desires to have all data removed due to data
-- protection / privacy reasons.
-- =============================================================================
create sequence history_sequence start with 1 increment by 1;
create table history (
  id               integer generated by default as sequence history_sequence primary key,
  user_id          integer not null references users (id),
  group_id         integer not null references groups (id),
  tablename        varchar(50) not null,
  record_id        integer not null,
  fields           varbinary(8192),
  changed          timestamp default now()
);
