#!/bin/bash

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Glassfish Control Script
# -----------------------------------------------------------------------------
# History:
#   Version 1.00 - 2014-10-25, Kim Jensen <Kim.Jensen@secunet.com>
#     o Initial version
# -----------------------------------------------------------------------------
# Methods:
#     o show_help     ( Void )   :: Shows help on using the script
#     o doLock        ( Void )   :: Creates a lock file
#     o getProcesses  ( Void )   :: Retrieves WildFly process count
#     o doStart       ( Void )   :: Attempts to start WildFly
#     o doStop        ( Void )   :: Attempts to stop WildFly
#     o doStatus      ( Void )   :: Retrieves the WildFly status
#     o doClean       ( Void )   :: Cleans existing test results
#     o doDeployIWS   ( Void )   :: Deploys latest IWS Snapshot
#     o doDeployIW4   ( Void )   :: Deploys latest IW4 Snapshot
#     o doLog         ( Void )   :: Tails the Glassfish Server Log
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Configuration settings, please only modify this section
# -----------------------------------------------------------------------------
readonly appDirectory="/opt/java/glassfish3"
export GLASSFISH_HOME=${appDirectory}
readonly GlassfishPort=4848
readonly GlassfishDebugPort=9009
readonly domain="domain1"
readonly instance="${appDirectory}/glassfish/domains/${domain}"
readonly serverLog="${instance}/logs/server.log"
readonly iwRoot="${HOME}/projects/Private/IDT"

# Java Settings, with Glassfish - we're using Java 7
readonly JAVA_HOME=/opt/java/jdk-7
readonly PATH=${JAVA_HOME}/bin:${PATH}
readonly java=${JAVA_HOME}/bin/java

readonly cmdStart="${appDirectory}/bin/asadmin --port ${GlassfishPort} start-domain ${domain}"

# Lock file settings for flock. Please don't change this!
readonly scriptLockFD="200"
readonly scriptLock="/tmp/.`basename $0`.lock"

# Script specific information, should only be altered, if logic is updated
readonly scriptVersion="1.00"
readonly scriptAuthor="Kim Jensen"
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Show Help - Displays the help, to use this script
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
show_help () {
    echo "Glassfish Control script, Version ${scriptVersion} by ${scriptAuthor}"
    echo "Usage: `basename $0` [COMMAND]"
    echo
    echo "  The Command must be one of the following:"
    echo "    start      Attempts to start Glassfish"
    echo "    stop       Attempts to stop Glassfish"
    echo "    status     Retrieves the status of Glassfish"
    echo "    clean      Cleanup of Glassfish, removing all deployments & log files"
    echo "    deployIWS  Deploys latest IWS Snapshot"
    echo "    deployIW4  Deploys latest IW4 Snapshot"
    echo "    log        Tails the Glassfish Server Log"
    echo
}

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doLock - Locks the program, so a second instance cannot start
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> 0 if successful, otherwise 1 (failed to obtain lock)
# -----------------------------------------------------------------------------
# Create the Lock file and assign a FileDescriptor to it, this is then used by
# flock to create a lock that will prevent other programs from running
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doLock () {
    # create lock file
    eval "exec ${scriptLockFD}>${scriptLock}"

    # acquire the lock
    flock -n ${scriptLockFD} \
        && return 0 \
        || return 1
}

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# getProcesses - Returns the number of processes associated with Glassfish
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Number of running processes (either one if running or zero if not)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
getProcesses () {
    return `netstat -pant 2>/dev/null | grep "LISTEN" | grep "${GlassfishPort}" | wc -l`
}

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doStart - Attempts to start Glassfish
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doStart () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "Starting Glassfish ..."
        ${cmdStart} 2>&1 >>${serverLog} &
    else
        echo "Glassfish is already running"
    fi
}

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doStop - Attempts to stop Glassfish
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doStop () {
    getProcesses

    if [ $? -ge 1 ]; then
        echo "Stopping Glassfish ..."

        netstat -pant 2>/dev/null | grep ${GlassfishPort} | grep java | awk '{print $7;}' | cut -d'/' -f1 | xargs kill -15 2>&1 >>${serverLog}
        # If the debugging is running, the process may not be killed by the above command
        netstat -pant 2>/dev/null | grep ${GlassfishDebugPort} | grep java | awk '{print $7;}' | cut -d'/' -f1 | xargs kill -15 2>&1 >>${serverLog}
        pgrep glassfish | xargs kill -15 2>&1 >/dev/null
    else
        echo "Glassfish is not running"
    fi
}

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doStatus - Retrieves the Glassfish Status
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doStatus () {
    getProcesses

    if [ $? -ge 1 ]; then
        echo "Glassfish is running"
    else
        echo "Glassfish is not running"
    fi
}

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doClean - Cleaning up logs and results
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doClean () {
    getProcesses

    if [ $? -ge 1 ]; then
        echo "Cannot clear files when Glassfish is running."
    else
        echo "Cleaning Glassfish Configuration"
        cd ${appDirectory}/glassfish/domains
        rm -fr ${domain} >/dev/null
        tar zxf clean_${domain}.tgz
    fi
}

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doDeployIWS - Deploys latest IWS Snapshot
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doDeployIWS () {
    cp ${iwRoot}/iws/iws-ear/target/iws.ear ${instance}/autodeploy
}

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doDeployIW4 - Deploys latest IW4 Snapshot
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doDeployIW4 () {
    cp ${iwRoot}/iw4/iw4-fe/target/intraweb.war ${instance}/autodeploy
}

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doLog - Tails the Glassfish Server Log
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doLog() {
    # In case the log file wasn't generated yet
    touch ${serverLog}
    tail -f ${serverLog}
}

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Main part, please don't touch!
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doLock
if [ $? -ne 0 ]; then
    echo "Another instance is already running..."
    exit 1
elif [ $# = 1 ]; then
    action=${1}

    if [ "${action}" = "start" ]; then
        doStart
    elif [ "${action}" = "stop" ]; then
        doStop
    elif [ "${action}" = "status" ]; then
        doStatus
    elif [ "${action}" = "clean" ]; then
        doClean
    elif [ "${action}" = "deployIWS" ]; then
        doDeployIWS
    elif [ "${action}" = "deployIW4" ]; then
        doDeployIW4
    elif [ "${action}" = "log" ]; then
        doLog
    else
        show_help
    fi
else
    show_help
fi

# Now, remove the lockfile
rm ${scriptLock}
