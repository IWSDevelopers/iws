/* * ============================================================================= * Copyright 1998-2012, IAESTE Internet Development Team. All rights reserved. * ----------------------------------------------------------------------------- * Project: IntraWeb Services (iws-client) - net.iaeste.iws.client.spring.ClientEntityManager * ----------------------------------------------------------------------------- * This software is provided by the members of the IAESTE Internet Development * Team (IDT) to IAESTE A.s.b.l. It is for internal use only and may not be * redistributed. IAESTE A.s.b.l. is not permitted to sell this software. * * This software is provided "as is"; the IDT or individuals within the IDT * cannot be held legally responsible for any problems the software may cause. * ============================================================================= */package net.iaeste.iws.client.spring;import net.iaeste.iws.client.Configuration;import org.postgresql.ds.PGSimpleDataSource;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;import org.springframework.orm.jpa.JpaVendorAdapter;import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;import javax.persistence.EntityManager;import javax.persistence.EntityManagerFactory;import javax.persistence.EntityTransaction;import javax.sql.DataSource;/** * * @author  Kim Jensen / last $Author: jensen.kim $ * @version $Revision: #1 $ / $Date: 2012/02/08 $ * @since   1.7 */final class ClientEntityManagerService {    private static final Logger LOG = LoggerFactory.getLogger(ClientEntityManagerService.class);    private final Configuration configuration = Configuration.getInstance();    private final EntityManager manager;    /**     * Default Constructor, initializes the internal EntityManagerFactory for     * the JPA JUnit tests, and also creates the class-wide manager instance,     * which will be used for the tests.     */    ClientEntityManagerService() {        final DataSource dataSource;        if (configuration.getUsePostgreSQLDatabase()) {            dataSource = preparePostgreSQLDataSource();        } else {            dataSource = prepareHSQLDataSource();        }        final EntityManagerFactory factory = prepareEntityManagerFactory(dataSource);        manager = factory.createEntityManager();    }    // ========================================================================    // Standard Methods for all invocations    // ========================================================================    public EntityManager getEntityManager() {        return manager;    }    /**     * This method should be invoked by the {@code beforeClass()} method in the     * JUnit4 tests.<br />     * The method cleans the current database completely, i.e. it resets the     * sequences, and deletes the content from all the tables.     */    public void startTransaction() {        manager.getTransaction().begin();    }    /**     * This method should be invoked by the {@code afterClass()} method in the     * JUnit4 tests.<br />     * The method will ensure that all ongoing transactions and connections     * are rolled back and closed.     */    public void closeTransaction() {        if (manager.isOpen()) {            commit();            manager.close();        }    }    // ========================================================================    // Internal methods    // ========================================================================    /**     * Commits the current transaction, if unable to do so, then a rollback is     * performed.     */    private void commit() {//        try {            final EntityTransaction transaction = manager.getTransaction();            if (transaction.isActive()) {                transaction.commit();            }//        } catch (final RollbackException e) {//            LOG.info("Persistency Problem: " + e.getMessage(), e);//            rollback();//        }    }    /**     * Performs a rollback of the current transaction.     */    private void rollback() {//        try {            final EntityTransaction transaction = manager.getTransaction();            if (transaction.isActive()) {                transaction.rollback();            }//        } catch (final RollbackException e) {//            LOG.info("Persistency Problem: " + e.getMessage(), e);//        }    }    /**     * Uses the Spring Embedded DataBuilder, to load the SQL statements for the     * HSQL database and create a new DataSource from these.     *     * @return New HSQL DataSource from SQL scripts     */    private DataSource prepareHSQLDataSource() {        return new EmbeddedDatabaseBuilder()                .setType(EmbeddedDatabaseType.HSQL)                .addScript("hsqldb/init_tables.sql")                .addScript("hsqldb/init_views.sql")                .addScript("hsqldb/init_data.sql")                .addScript("hsqldb/offers-init.sql")                .build();    }    /**     * Prepares a simple PostgreSQL DataSource instance, and returns this.     *     * @return New PostgreSQL DataSource     */    private DataSource preparePostgreSQLDataSource() {        final PGSimpleDataSource dataSource = new PGSimpleDataSource();        dataSource.setDatabaseName(configuration.getPostgresqlDatabaseName());        dataSource.setUser(configuration.getPostgresqlUsername());        dataSource.setPassword(configuration.getPostgresqlPassword());        dataSource.setServerName(configuration.getPostgresqlServerName());        dataSource.setPortNumber(configuration.getPostgresqlPort());        return dataSource;    }    /**     * Prepares an {@code EntityManagerFactory} instance for the provided     * {@code DataSource}.     *     * @param dataSource  {@code DataSource} instance to create Factory for     * @return New {@code EntityManagerFactory} instance     */    private EntityManagerFactory prepareEntityManagerFactory(final DataSource dataSource) {        final LocalContainerEntityManagerFactoryBean factoryBean = new LocalContainerEntityManagerFactoryBean();        final JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();        factoryBean.setPackagesToScan("net.iaeste.iws.persistence");        factoryBean.setDataSource(dataSource);        factoryBean.setJpaVendorAdapter(vendorAdapter);        return factoryBean.getObject();    }}