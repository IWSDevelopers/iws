<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>iws-parent</artifactId>
        <groupId>net.iaeste.iws</groupId>
        <version>1.1-SNAPSHOT</version>
        <relativePath>../iws-parent/pom.xml</relativePath>
    </parent>
    <artifactId>iws-api</artifactId>
    <name>IWS - API</name>
    <description>IntraWeb Services - API Module</description>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.2</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.15</version>
                <configuration>
                    <!-- The surefire plugin supports running the execution of
                         the JUnit tests in parallel, and with various options
                         set. Although the "advertized" advantage is to speed up
                         the test suite, is more or less crap, there is another
                         advantage to running things in parallel. And that is
                         to see how the system handles multiple threads that
                         accesses it at the same time - in other words, how
                         thread-safe is the system.
                           Since each thread needs to build the Spring beans
                         required by the tests, it means that the overall
                         testing takes significantly longer and will eat more
                         memory. If it makes the system too slow, please reduce
                         the number of threads in the threadCount below. But
                         note, that those changes should not be committed.
                           Spring seems to have a problem with the in-memory
                         database and running tests in parallel. Hence, these
                         tests are not enabled by default. The setting is here
                         merely to show how to configure it. An alternative to
                         running the tests in parallel using Maven, is to use
                         IntelliJ's forkmode for JUnit tests.
                           Parallel supports 'classes', 'methods' or 'both' -->
                    <parallel>both</parallel>
                    <threadCount>10</threadCount>
                </configuration>
                <goals>
                    <goal>test</goal>
                </goals>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.5</version>
                <executions>
                    <execution>
                        <phase>deploy</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>coverage</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <configuration>
                            <destFile>${project.basedir}/../target/jacoco.exec</destFile>
                        </configuration>
                        <executions>
                            <execution>
                                <id>post-test</id>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.15</version>
                        <configuration>
                            <parallel>none</parallel>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <dependency>
            <groupId>gsbase</groupId>
            <artifactId>gsbase</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
        </dependency>
    </dependencies>
</project>
